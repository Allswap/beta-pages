/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DistributorInterface extends ethers.utils.Interface {
  functions: {
    "add(address,uint256)": FunctionFragment;
    "check()": FunctionFragment;
    "claim(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEnd(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "update(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "check", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Distributor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DistributorInterface;

  functions: {
    add(
      _token: string,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add(address,uint256)"(
      _token: string,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    check(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    "check()"(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    claim(inviter: string, overrides?: Overrides): Promise<ContractTransaction>;

    "claim(address)"(
      inviter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setEnd(
      _rewardEndBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEnd(uint256)"(
      _rewardEndBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    update(
      _pid: BigNumberish,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "update(uint256,uint256)"(
      _pid: BigNumberish,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  add(
    _token: string,
    _claimAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add(address,uint256)"(
    _token: string,
    _claimAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  check(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

  "check()"(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

  claim(inviter: string, overrides?: Overrides): Promise<ContractTransaction>;

  "claim(address)"(
    inviter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setEnd(
    _rewardEndBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEnd(uint256)"(
    _rewardEndBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  update(
    _pid: BigNumberish,
    _claimAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "update(uint256,uint256)"(
    _pid: BigNumberish,
    _claimAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      _token: string,
      _claimAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(address,uint256)"(
      _token: string,
      _claimAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    check(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    "check()"(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    claim(inviter: string, overrides?: CallOverrides): Promise<void>;

    "claim(address)"(inviter: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setEnd(
      _rewardEndBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEnd(uint256)"(
      _rewardEndBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      _pid: BigNumberish,
      _claimAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "update(uint256,uint256)"(
      _pid: BigNumberish,
      _claimAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    add(
      _token: string,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add(address,uint256)"(
      _token: string,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    check(overrides?: CallOverrides): Promise<BigNumber>;

    "check()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(inviter: string, overrides?: Overrides): Promise<BigNumber>;

    "claim(address)"(
      inviter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setEnd(
      _rewardEndBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEnd(uint256)"(
      _rewardEndBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    update(
      _pid: BigNumberish,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "update(uint256,uint256)"(
      _pid: BigNumberish,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _token: string,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(address,uint256)"(
      _token: string,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    check(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "check()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      inviter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address)"(
      inviter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setEnd(
      _rewardEndBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEnd(uint256)"(
      _rewardEndBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    update(
      _pid: BigNumberish,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "update(uint256,uint256)"(
      _pid: BigNumberish,
      _claimAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
